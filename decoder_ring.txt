Characters
----------

ðŸ˜¸ = "0"
ðŸ˜¹ = "1"
ðŸ˜º = "2"
ðŸ˜» = "3"
ðŸ˜¼ = "4"
ðŸ˜½ = "5"
ðŸ˜¾ = "6"
ðŸ˜¿ = "7"
ðŸ™€ = "8"

Memory
------

MEMADDR -1 is program counter
MEMADDR x is general-purpose memory

Instructions
------------

- "31": asgnlit - MEMADDR VALUE
- "57": jumpif> -  MEMADDR VALUE
- "54": echovar - MEMADDR
- "44": echoval - MEMADDR
- "46": pointer - MEMADDR
- "83": randomb - MEMADDR
- "24": inputst - MEMADDR
- "782": applop- - MEMADDR VALUE
- "788": applop* - MEMADDR VALUE
- "787": applop* - MEMADDR VALUE
- "78x": applop+ - MEMADDR VALUE
- "88": diepgrm
- Invalid instruction: asgnlit -1 -1 -> Go to beginning of program

The program counter is initialized to -1. Program counter is incremented
before each instruction is executed.

diepgrm
~~~~~~~

Exit program.

pointer
~~~~~~~

Memory at address MEMADDR is set to contents of memory at address MEMADDR.

randomb
~~~~~~~

Set memory at address MEMADDR to a random boolean value.

asgnlit
~~~~~~~

Set memory at address MEMADDR to VALUE.

jumpif>
~~~~~~~

If contents at address MEMADDR is greater than 0, set program counter to
VALUE.

applop+
~~~~~~~

Add VALUE to the contents at address MEMADDR.

applop-
~~~~~~~

Subtract VALUE from the contents at MEMADDR.

applop*
~~~~~~~

Multiply contents of MEMADDR by VALUE.

applop/
~~~~~~~

Divide contents of MEMADDR by VALUE.

echovar
~~~~~~~

Output contents of MEMADDR as a character.

echoval
~~~~~~~

Output contents of MEMADDR as a number.

inputst
~~~~~~~

Input a line of text (length N) to MEMADDR through MEMADDR+N-1 and store 0 to
MEMADDR+n.

Numbers
-------

Numbers of strings of base-8 (octal) digits, stopping when an "8" is found. If
next digit is "7", then the number is negative. If out of instructions when trying
to parse a number, the value is 1337 for some unknown reason.
